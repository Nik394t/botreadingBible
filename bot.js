const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const sqlite3 = require('sqlite3').verbose();
const moment = require('moment');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = require('./config.js');
const BOT_TOKEN = config.BOT_TOKEN;
const GROUP_CHAT_ID = config.GROUP_CHAT_ID;

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'bible_bot.db');
const db = new sqlite3.Database(dbPath);

// –ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è –Ω–∞ 365 –¥–Ω–µ–π
const readingPlan = require('./reading_plan.json');

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
db.serialize(() => {
    // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        start_date TEXT,
        current_day INTEGER DEFAULT 1,
        is_active INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á—Ç–µ–Ω–∏—è
    db.run(`CREATE TABLE IF NOT EXISTS reading_progress (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        day INTEGER,
        date TEXT,
        completed INTEGER DEFAULT 0,
        completed_at DATETIME,
        FOREIGN KEY (user_id) REFERENCES users (telegram_id)
    )`);

    // –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    db.run(`CREATE TABLE IF NOT EXISTS notification_settings (
        user_id INTEGER PRIMARY KEY,
        morning_time TEXT DEFAULT '06:00',
        timezone TEXT DEFAULT 'Europe/Moscow',
        enabled INTEGER DEFAULT 1,
        FOREIGN KEY (user_id) REFERENCES users (telegram_id)
    )`);
});

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            ['üìñ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á—Ç–µ–Ω–∏–µ', '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º'],
            ['üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
            ['üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã', '‚ùì –ü–æ–º–æ—â—å']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const settingsKeyboard = {
    reply_markup: {
        keyboard: [
            ['üîî –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', 'üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å'],
            ['üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', 'üîô –ù–∞–∑–∞–¥']
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
function getUser(telegramId) {
    return new Promise((resolve, reject) => {
        db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, row) => {
            if (err) reject(err);
            else resolve(row);
        });
    });
}

function createUser(telegramId, username, firstName, startDay = 1) {
    return new Promise((resolve, reject) => {
        const startDate = moment().format('YYYY-MM-DD');
        db.run(
            'INSERT OR REPLACE INTO users (telegram_id, username, first_name, start_date, current_day, is_active) VALUES (?, ?, ?, ?, ?, 1)',
            [telegramId, username, firstName, startDate, startDay],
            function(err) {
                if (err) reject(err);
                else {
                    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    db.run('INSERT OR REPLACE INTO notification_settings (user_id) VALUES (?)', [telegramId]);
                    
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–µ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–Ω–µ–π
                    if (startDay > 1) {
                        const completedDays = startDay - 1;
                        for (let day = 1; day <= completedDays; day++) {
                            const dayDate = moment().subtract(completedDays - day, 'days').format('YYYY-MM-DD');
                            db.run(
                                'INSERT OR REPLACE INTO reading_progress (user_id, day, date, completed, completed_at) VALUES (?, ?, ?, 1, ?)',
                                [telegramId, day, dayDate, moment().subtract(completedDays - day, 'days').format('YYYY-MM-DD HH:mm:ss')]
                            );
                        }
                    }
                    
                    resolve(this.lastID);
                }
            }
        );
    });
}

function updateUserProgress(telegramId, day) {
    return new Promise((resolve, reject) => {
        const today = moment().format('YYYY-MM-DD');
        db.run(
            'INSERT OR REPLACE INTO reading_progress (user_id, day, date, completed, completed_at) VALUES (?, ?, ?, 1, CURRENT_TIMESTAMP)',
            [telegramId, day, today],
            function(err) {
                if (err) reject(err);
                else {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    db.run('UPDATE users SET current_day = ? WHERE telegram_id = ?', [day + 1, telegramId]);
                    resolve(this.changes);
                }
            }
        );
    });
}

function getUserProgress(telegramId) {
    return new Promise((resolve, reject) => {
        db.all(
            'SELECT * FROM reading_progress WHERE user_id = ? ORDER BY day',
            [telegramId],
            (err, rows) => {
                if (err) reject(err);
                else resolve(rows);
            }
        );
    });
}

function getAllUsersProgress() {
    return new Promise((resolve, reject) => {
        db.all(`
            SELECT u.first_name, u.username, u.current_day, u.start_date,
                   COUNT(rp.completed) as completed_days
            FROM users u
            LEFT JOIN reading_progress rp ON u.telegram_id = rp.user_id AND rp.completed = 1
            WHERE u.is_active = 1
            GROUP BY u.telegram_id
            ORDER BY completed_days DESC, u.current_day DESC
        `, (err, rows) => {
            if (err) reject(err);
            else resolve(rows);
        });
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const telegramId = msg.from.id;
    const username = msg.from.username || '';
    const firstName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

    try {
        const existingUser = await getUser(telegramId);
        
        if (existingUser) {
            bot.sendMessage(chatId, 
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${firstName}! üôè\n\n` +
                `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ ${existingUser.current_day} –¥–Ω–µ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è.\n` +
                `–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–≤–æ–µ –¥—É—Ö–æ–≤–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! üìñ`,
                mainKeyboard
            );
        } else {
            // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            bot.sendMessage(chatId,
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏! üìñüôè\n\n` +
                `–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —á–∏—Ç–∞—Ç—å –°–≤—è—â–µ–Ω–Ω–æ–µ –ü–∏—Å–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É.\n\n` +
                `–í—ã –Ω–æ–≤–∏—á–æ–∫ –≤ —á—Ç–µ–Ω–∏–∏ –ë–∏–±–ª–∏–∏ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ?`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: 'üÜï –Ø –Ω–æ–≤–∏—á–æ–∫, –Ω–∞—á–Ω—É —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è', callback_data: 'start_new' }],
                            [{ text: 'üìö –£–∂–µ —á–∏—Ç–∞—é, —É–∫–∞–∂—É —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'start_existing' }]
                        ]
                    }
                }
            );
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
bot.on('callback_query', async (callbackQuery) => {
    const message = callbackQuery.message;
    const chatId = message.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;
    const firstName = callbackQuery.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const username = callbackQuery.from.username || '';

    try {
        if (data === 'start_new') {
            await createUser(telegramId, username, firstName, 1);
            bot.editMessageText(
                `–û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è! üåü\n\n` +
                `–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —á—Ç–µ–Ω–∏–∏.\n` +
                `–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n` +
                `–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üìñ`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                }
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            setTimeout(() => {
                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
            }, 1000);
            
        } else if (data === 'start_existing') {
            bot.editMessageText(
                `–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–ª–∞–Ω–∞ –≤—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ (–æ—Ç 1 –¥–æ 365):\n\n` +
                `–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ 30 –¥–Ω–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ: 30`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                }
            );
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞
            bot.once('message', async (msg) => {
                if (msg.from.id === telegramId && msg.chat.id === chatId) {
                    const dayNumber = parseInt(msg.text);
                    if (dayNumber >= 1 && dayNumber <= 365) {
                        await createUser(telegramId, username, firstName, dayNumber + 1);
                        bot.sendMessage(chatId,
                            `–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å ${dayNumber + 1} –¥–Ω—è –ø–ª–∞–Ω–∞. üìñ\n\n` +
                            `–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —á—Ç–µ–Ω–∏–∏.\n` +
                            `–í—Ä–µ–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.`,
                            mainKeyboard
                        );
                    } else {
                        bot.sendMessage(chatId, 
                            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365.',
                            mainKeyboard
                        );
                    }
                }
            });
            
        } else if (data === 'confirm_reset') {
            try {
                await resetUserProgress(telegramId, username, firstName);
                
                bot.editMessageText(
                    `‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!\n\n` +
                    `üÜï –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:`,
                    {
                        chat_id: chatId,
                        message_id: message.message_id,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: 'üåü –ù–∞—á–∞—Ç—å —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è', callback_data: 'reset_start_new' }],
                                [{ text: 'üìö –£ –º–µ–Ω—è –µ—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å', callback_data: 'reset_start_existing' }]
                            ]
                        }
                    }
                );
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
                bot.editMessageText(
                    '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                    {
                        chat_id: chatId,
                        message_id: message.message_id,
                        reply_markup: { inline_keyboard: [] }
                    }
                );
            }
            
        } else if (data === 'cancel_reset') {
            bot.editMessageText(
                '‚ùå –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω.\n\n–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.',
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                }
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            setTimeout(() => {
                bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settingsKeyboard);
            }, 1000);
            
        } else if (data.startsWith('mark_read_')) {
            const dayToMark = parseInt(data.replace('mark_read_', ''));
            const user = await getUser(telegramId);
            
            if (user && dayToMark === user.current_day) {
                await updateUserProgress(telegramId, dayToMark);
                
                bot.editMessageText(
                    `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å ${dayToMark} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π!\n\n` +
                    `üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥–µ—Ç –¥–µ–Ω—å ${dayToMark + 1}.\n\n` +
                    `üôè –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –°–ª–æ–≤–∞ –ë–æ–∂—å–µ–≥–æ!`,
                    {
                        chat_id: chatId,
                        message_id: message.message_id,
                        reply_markup: { inline_keyboard: [] }
                    }
                );
                
                // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                if (GROUP_CHAT_ID && GROUP_CHAT_ID !== 'YOUR_GROUP_CHAT_ID_HERE') {
                    const groupMessage = 
                        `üìñ ${firstName} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á—Ç–µ–Ω–∏–µ –¥–Ω—è ${dayToMark}!\n` +
                        `üéâ –ü–æ–¥–¥–µ—Ä–∂–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ü–∏—Å–∞–Ω–∏—è!`;
                    
                    bot.sendMessage(GROUP_CHAT_ID, groupMessage);
                }
            } else {
                bot.editMessageText(
                    '‚ùå –≠—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –æ—Ç–º–µ—á–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É.',
                    {
                        chat_id: chatId,
                        message_id: message.message_id,
                        reply_markup: { inline_keyboard: [] }
                    }
                );
            }
            
        } else if (data === 'reset_start_new') {
            await createUser(telegramId, username, firstName, 1);
            bot.editMessageText(
                `üåü –û—Ç–ª–∏—á–Ω–æ! –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Å–≤–æ–µ –Ω–æ–≤–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è!\n\n` +
                `üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${moment().format('DD.MM.YYYY')}\n` +
                `üîî –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —á—Ç–µ–Ω–∏–∏.\n` +
                `‚öôÔ∏è –í—Ä–µ–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n` +
                `üìñ –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∏–∑—É—á–µ–Ω–∏–µ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ü–∏—Å–∞–Ω–∏—è!`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                }
            );
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            setTimeout(() => {
                bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainKeyboard);
            }, 1000);
            
        } else if (data === 'reset_start_existing') {
            bot.editMessageText(
                `üìö –£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø–ª–∞–Ω–∞ –≤—ã —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª–∏ (–æ—Ç 1 –¥–æ 365):\n\n` +
                `–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –ø—Ä–æ—á–∏—Ç–∞–ª–∏ 50 –¥–Ω–µ–π, –Ω–∞–ø–∏—à–∏—Ç–µ: 50\n\n` +
                `üí° –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞.`,
                {
                    chat_id: chatId,
                    message_id: message.message_id,
                    reply_markup: { inline_keyboard: [] }
                }
            );
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —á–∏—Å–ª–∞ –¥–ª—è —Å–±—Ä–æ—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.once('message', async (msg) => {
                if (msg.from.id === telegramId && msg.chat.id === chatId) {
                    const dayNumber = parseInt(msg.text);
                    if (dayNumber >= 1 && dayNumber <= 365) {
                        await createUser(telegramId, username, firstName, dayNumber + 1);
                        bot.sendMessage(chatId,
                            `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n` +
                            `üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: ${dayNumber}\n` +
                            `üìñ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å ${dayNumber + 1} –¥–Ω—è –ø–ª–∞–Ω–∞\n` +
                            `üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: ${moment().format('DD.MM.YYYY')}\n\n` +
                            `üîî –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 —É—Ç—Ä–∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —á—Ç–µ–Ω–∏–∏.\n` +
                            `‚öôÔ∏è –í—Ä–µ–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.\n\n` +
                            `üôè –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –≤ –∏–∑—É—á–µ–Ω–∏–∏ –°–ª–æ–≤–∞ –ë–æ–∂—å–µ–≥–æ!`,
                            mainKeyboard
                        );
                    } else {
                        bot.sendMessage(chatId, 
                            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 365.\n\n' +
                            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.',
                            mainKeyboard
                        );
                    }
                }
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    bot.answerCallbackQuery(callbackQuery.id);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        const telegramId = msg.from.id;
        const text = msg.text;

        try {
            const user = await getUser(telegramId);
            if (!user) {
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
                return;
            }

            switch (text) {
                case 'üìñ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á—Ç–µ–Ω–∏–µ':
                    await handleTodayReading(chatId, user);
                    break;
                    
                case '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º':
                    await handleMarkAsRead(chatId, telegramId, user);
                    break;
                    
                case 'üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å':
                    await handleMyProgress(chatId, telegramId);
                    break;
                    
                case 'üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã':
                    await handleGroupProgress(chatId);
                    break;
                    
                case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                    bot.sendMessage(chatId, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:', settingsKeyboard);
                    break;
                    
                case 'üîô –ù–∞–∑–∞–¥':
                    bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard);
                    break;
                    
                case '‚ùì –ü–æ–º–æ—â—å':
                    await handleHelp(chatId);
                    break;
                    
                case 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å':
                    await handleResetProgress(chatId, telegramId);
                    break;
                    
                default:
                    bot.sendMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.', mainKeyboard);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async function handleTodayReading(chatId, user) {
    const currentDay = user.current_day;
    
    if (currentDay > 365) {
        bot.sendMessage(chatId, 
            'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏!\n\n' +
            '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.',
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data: 'restart_plan' }]
                    ]
                }
            }
        );
        return;
    }

    const todayReading = readingPlan[currentDay - 1];
    if (todayReading) {
        const message = 
            `üìñ –î–µ–Ω—å ${currentDay} –∏–∑ 365\n\n` +
            `üìÖ ${todayReading.date}\n\n` +
            `üìö –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á—Ç–µ–Ω–∏–µ:\n` +
            `${todayReading.reading}\n\n` +
            `üí≠ ${todayReading.theme || '–†–∞–∑–º—ã—à–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–º'}\n\n` +
            `üôè –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–º–æ–ª–∏—Ç—å—Å—è –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è —Å –ë–æ–≥–æ–º, —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ–Ω—å –ï–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏ –ª—é–±–æ–≤—å—é!`;
            
        bot.sendMessage(chatId, message, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ', callback_data: `mark_read_${currentDay}` }]
                ]
            }
        });
    } else {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleMarkAsRead(chatId, telegramId, user) {
    const currentDay = user.current_day;
    
    if (currentDay > 365) {
        bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≥–æ–¥–æ–≤–æ–π –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è! üéâ');
        return;
    }

    try {
        await updateUserProgress(telegramId, currentDay);
        
        const message = 
            `‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å ${currentDay} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π!\n\n` +
            `üåü –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! –ó–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥–µ—Ç –¥–µ–Ω—å ${currentDay + 1}.\n\n` +
            `üôè –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –°–ª–æ–≤–∞ –ë–æ–∂—å–µ–≥–æ!`;
            
        bot.sendMessage(chatId, message);
        
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
        if (GROUP_CHAT_ID && GROUP_CHAT_ID !== 'YOUR_GROUP_CHAT_ID_HERE') {
            const groupMessage = 
                `üìñ ${user.first_name} –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á—Ç–µ–Ω–∏–µ –¥–Ω—è ${currentDay}!\n` +
                `üéâ –ü–æ–¥–¥–µ—Ä–∂–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –ü–∏—Å–∞–Ω–∏—è!`;
            
            bot.sendMessage(GROUP_CHAT_ID, groupMessage);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleMyProgress(chatId, telegramId) {
    try {
        const user = await getUser(telegramId);
        const progress = await getUserProgress(telegramId);
        
        const totalDays = progress.length;
        const currentDay = user.current_day;
        const percentage = Math.round((totalDays / 365) * 100);
        
        const startDate = moment(user.start_date);
        const daysSinceStart = moment().diff(startDate, 'days') + 1;
        
        let message = 
            `üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –ë–∏–±–ª–∏–∏\n\n` +
            `üë§ ${user.first_name}\n` +
            `üìÖ –ù–∞—á–∞–ª–∏: ${startDate.format('DD.MM.YYYY')}\n` +
            `üìñ –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å: ${currentDay > 365 ? '365 (–∑–∞–≤–µ—Ä—à–µ–Ω–æ!)' : currentDay}\n` +
            `‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –¥–Ω–µ–π: ${totalDays}\n` +
            `üìà –ü—Ä–æ–≥—Ä–µ—Å—Å: ${percentage}%\n` +
            `‚è±Ô∏è –î–Ω–µ–π —Å –Ω–∞—á–∞–ª–∞: ${daysSinceStart}\n\n`;
            
        // –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressBar = '‚ñà'.repeat(Math.floor(percentage / 5)) + '‚ñë'.repeat(20 - Math.floor(percentage / 5));
        message += `[${progressBar}] ${percentage}%\n\n`;
        
        if (currentDay <= 365) {
            const remaining = 365 - totalDays;
            message += `üéØ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${remaining}\n`;
            
            if (daysSinceStart > totalDays) {
                const behind = daysSinceStart - totalDays;
                message += `‚ö†Ô∏è –û—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: ${behind} –¥–Ω–µ–π\n`;
            } else if (totalDays > daysSinceStart) {
                const ahead = totalDays - daysSinceStart;
                message += `üöÄ –û–ø–µ—Ä–µ–∂–µ–Ω–∏–µ: ${ahead} –¥–Ω–µ–π\n`;
            } else {
                message += `‚úÖ –í—ã –∏–¥–µ—Ç–µ –ø–æ –ø–ª–∞–Ω—É!\n`;
            }
        } else {
            message += `üéâ –ü–ª–∞–Ω –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n`;
        }
        
        bot.sendMessage(chatId, message);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleGroupProgress(chatId) {
    try {
        const allProgress = await getAllUsersProgress();
        
        if (allProgress.length === 0) {
            bot.sendMessage(chatId, '–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –≥—Ä—É–ø–ø—ã.');
            return;
        }
        
        let message = 'üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã –ø–æ —á—Ç–µ–Ω–∏—é –ë–∏–±–ª–∏–∏\n\n';
        
        allProgress.forEach((user, index) => {
            const percentage = Math.round((user.completed_days / 365) * 100);
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üìñ';
            
            message += 
                `${medal} ${user.first_name}\n` +
                `   üìä ${user.completed_days}/365 –¥–Ω–µ–π (${percentage}%)\n` +
                `   üìÖ –î–µ–Ω—å –ø–ª–∞–Ω–∞: ${user.current_day > 365 ? '365 ‚úÖ' : user.current_day}\n\n`;
        });
        
        message += 'üôè –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –°–ª–æ–≤–∞ –ë–æ–∂—å–µ–≥–æ!';
        
        bot.sendMessage(chatId, message);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø—ã:', error);
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

async function handleHelp(chatId) {
    const helpMessage = 
        `‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n\n` +
        `üìñ –°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ —á—Ç–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n` +
        `‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º - –æ—Ç–º–µ—á–∞–µ—Ç –¥–µ–Ω—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π\n` +
        `üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n` +
        `üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –≥—Ä—É–ø–ø—ã - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
        `‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n` +
        `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00\n` +
        `üåç –í—Ä–µ–º—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö\n\n` +
        `üìö –ü–ª–∞–Ω —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ 365 –¥–Ω–µ–π\n` +
        `üôè –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∫–ª—é—á–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∏ –º–æ–ª–∏—Ç–≤—É\n\n` +
        `‚ùì –ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;
        
    bot.sendMessage(chatId, helpMessage);
}

async function handleResetProgress(chatId, telegramId) {
    try {
        const user = await getUser(telegramId);
        if (!user) {
            bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start');
            return;
        }

        bot.sendMessage(chatId, 
            `‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å?\n\n` +
            `–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:\n` +
            `‚Ä¢ –£–¥–∞–ª–∏—Ç –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á—Ç–µ–Ω–∏—è\n` +
            `‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞ 1\n` +
            `‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞\n\n` +
            `‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å', callback_data: 'confirm_reset' },
                            { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'cancel_reset' }
                        ]
                    ]
                }
            }
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', error);
        bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
}

function resetUserProgress(telegramId, username, firstName) {
    return new Promise((resolve, reject) => {
        db.serialize(() => {
            // –£–¥–∞–ª—è–µ–º –≤–µ—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è
            db.run('DELETE FROM reading_progress WHERE user_id = ?', [telegramId], (err) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err);
                    reject(err);
                    return;
                }
                console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å —á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId} —É–¥–∞–ª–µ–Ω`);
            });

            // –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ (–≤—Ä–µ–º–µ–Ω–Ω–æ)
            // –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            db.run(
                'UPDATE users SET is_active = 0 WHERE telegram_id = ?',
                [telegramId],
                function(err) {
                    if (err) {
                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
                        reject(err);
                    } else {
                        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegramId} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –∫ —Å–±—Ä–æ—Å—É`);
                        resolve(this.changes);
                    }
                }
            );
        });
    });
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
cron.schedule('0 6 * * *', async () => {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
    
    try {
        db.all('SELECT * FROM users WHERE is_active = 1', async (err, users) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                return;
            }
            
            for (const user of users) {
                try {
                    const currentDay = user.current_day;
                    
                    if (currentDay <= 365) {
                        const todayReading = readingPlan[currentDay - 1];
                        
                        const message = 
                            `üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, ${user.first_name}!\n\n` +
                            `üìñ –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ—á–∏—Ç–∞—Ç—å –ü–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–º–æ–ª–∏—Ç—å—Å—è!\n` +
                            `üôè –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –ë–æ–≥–æ–º, —á—Ç–æ–±—ã –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –¥–µ–Ω—å –ï–≥–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ–º –∏ –ª—é–±–æ–≤—å—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ—ë —Ç–µ–º, –∫—Ç–æ —Ä—è–¥–æ–º.\n\n` +
                            `üìö –î–µ–Ω—å ${currentDay}: ${todayReading ? todayReading.reading : '–ü–ª–∞–Ω —á—Ç–µ–Ω–∏—è'}\n\n` +
                            `‚ú® –ë–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–Ω–æ–≥–æ –¥–Ω—è!`;
                            
                        await bot.sendMessage(user.telegram_id, message, {
                            reply_markup: {
                                inline_keyboard: [
                                    [{ text: 'üìñ –û—Ç–∫—Ä—ã—Ç—å —á—Ç–µ–Ω–∏–µ', callback_data: 'today_reading' }],
                                    [{ text: '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º', callback_data: `mark_read_${currentDay}` }]
                                ]
                            }
                        });
                    }
                    
                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegram_id}:`, error);
                }
            }
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

bot.on('polling_error', (error) => {
    console.error('–û—à–∏–±–∫–∞ polling:', error);
});

console.log('ü§ñ Bible Reading Bot –∑–∞–ø—É—â–µ–Ω!');
console.log('üìñ –ì–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –°–≤—è—â–µ–Ω–Ω–æ–≥–æ –ü–∏—Å–∞–Ω–∏—è!');