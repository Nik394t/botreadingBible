// –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ –±–µ–∑ Telegram API
const sqlite3 = require('sqlite3').verbose();
const moment = require('moment');
const fs = require('fs');
const path = require('path');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞–Ω —á—Ç–µ–Ω–∏—è
console.log('üìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∞ —á—Ç–µ–Ω–∏—è:');
try {
    const readingPlan = require('./reading_plan.json');
    console.log(`‚úÖ –ü–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: ${readingPlan.length} –¥–Ω–µ–π`);
    console.log(`üìÖ –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å: ${readingPlan[0].reading}`);
    console.log(`üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: ${readingPlan[readingPlan.length - 1].reading}\n`);
} catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–∞:', error.message);
}

// –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
console.log('üóÑÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
const dbPath = path.join(__dirname, 'test_bible_bot.db');
const db = new sqlite3.Database(dbPath);

db.serialize(() => {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
    db.run(`CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY,
        telegram_id INTEGER UNIQUE,
        username TEXT,
        first_name TEXT,
        start_date TEXT,
        current_day INTEGER DEFAULT 1,
        is_active INTEGER DEFAULT 1,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )`, (err) => {
        if (err) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞');
        }
    });

    db.run(`CREATE TABLE IF NOT EXISTS reading_progress (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        day INTEGER,
        date TEXT,
        completed INTEGER DEFAULT 0,
        completed_at DATETIME,
        FOREIGN KEY (user_id) REFERENCES users (telegram_id)
    )`, (err) => {
        if (err) {
            console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã reading_progress:', err.message);
        } else {
            console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ reading_progress —Å–æ–∑–¥–∞–Ω–∞');
        }
    });

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testUserId = 123456789;
    const testUsername = 'test_user';
    const testFirstName = '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    
    db.run(
        'INSERT OR REPLACE INTO users (telegram_id, username, first_name, start_date, current_day) VALUES (?, ?, ?, ?, ?)',
        [testUserId, testUsername, testFirstName, moment().format('YYYY-MM-DD'), 5],
        function(err) {
            if (err) {
                console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
            } else {
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                for (let day = 1; day <= 4; day++) {
                    db.run(
                        'INSERT OR REPLACE INTO reading_progress (user_id, day, date, completed, completed_at) VALUES (?, ?, ?, 1, CURRENT_TIMESTAMP)',
                        [testUserId, day, moment().subtract(5 - day, 'days').format('YYYY-MM-DD')]
                    );
                }
                console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω');
            }
        }
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
    setTimeout(() => {
        db.get('SELECT * FROM users WHERE telegram_id = ?', [testUserId], (err, user) => {
            if (err) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err.message);
            } else if (user) {
                console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.first_name}, –¥–µ–Ω—å ${user.current_day}`);
            }
        });

        db.all('SELECT * FROM reading_progress WHERE user_id = ?', [testUserId], (err, progress) => {
            if (err) {
                console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err.message);
            } else {
                console.log(`‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–π–¥–µ–Ω: ${progress.length} –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
            }
        });

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –∏ —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        setTimeout(() => {
            db.close((err) => {
                if (err) {
                    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –±–∞–∑—ã:', err.message);
                } else {
                    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–∞');
                    
                    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    fs.unlink(dbPath, (err) => {
                        if (err) {
                            console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª:', err.message);
                        } else {
                            console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
                        }
                        
                        console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
                        console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
                        console.log('1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather');
                        console.log('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export BOT_TOKEN="–≤–∞—à_—Ç–æ–∫–µ–Ω"');
                        console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: ./start_bot.sh');
                        console.log('4. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start');
                    });
                }
            });
        }, 1000);
    }, 500);
});

// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
console.log('\n‚è∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤—Ä–µ–º–µ–Ω–∏:');
console.log(`üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${moment().format('DD.MM.YYYY')}`);
console.log(`üïï –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${moment().format('HH:mm')}`);
console.log(`üìÜ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –≥–æ–¥–∞: ${moment().startOf('year').format('DD.MM.YYYY')}`);

// –¢–µ—Å—Ç–∏—Ä—É–µ–º cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
console.log('\n‚è≤Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:');
const cron = require('node-cron');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è 6:00 —É—Ç—Ä–∞
if (cron.validate('0 6 * * *')) {
    console.log('‚úÖ Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è 6:00 —É—Ç—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ');
} else {
    console.log('‚ùå Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ');
}

console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:');
try {
    require('node-telegram-bot-api');
    console.log('‚úÖ node-telegram-bot-api —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
} catch (e) {
    console.log('‚ùå node-telegram-bot-api –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

try {
    require('node-cron');
    console.log('‚úÖ node-cron —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
} catch (e) {
    console.log('‚ùå node-cron –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

try {
    require('sqlite3');
    console.log('‚úÖ sqlite3 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
} catch (e) {
    console.log('‚ùå sqlite3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}

try {
    require('moment');
    console.log('‚úÖ moment —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
} catch (e) {
    console.log('‚ùå moment –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
}